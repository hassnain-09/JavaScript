


1. +++++++++++++++++++++++++++++++++++++++++++++ForOf, ForIn, For Loop, While Loop, and DoWhile Loop+++++++++++++++++++++++++++++++++
✅ All these loops are not callback-based (i.e., they are standard control structures)

✅ They do not return a value by default

✅ They are typically used for side effects

❌ The return statement only works if they are inside a function — otherwise, it causes a SyntaxError

✅ Use break to exit the loop early and continue to skip the current iteration

const arr = [1, 2, 3];

// ❌ SyntaxError: Illegal return statement
for (const num of arr) {
  if (num === 2) return; // ❌ Not allowed unless inside a function
  console.log(num);
}

✅ Inside a function
function stopAtTwo(arr) {
  for (const num of arr) {
    if (num === 2) return "Found 2"; // ✅ exits function
    console.log(num);
  }
}

console.log(stopAtTwo([1, 2, 3])); // prints 1, then "Found 2"


✅ continue and break work fine:

const arr = [1, 2, 3];

for (const num of arr) {
  if (num === 2) continue; // ✅ skips 2
  console.log(num); // prints 1, 3
}

for (const num of arr) {
  if (num === 2) break; // ✅ stops at 2
  console.log(num); // prints 1
}





2. ++++++++++++++++++++++++++++++++++++++++++++++++++forEach+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
✅ It is a callback-based loop

❌ It does not return a new array or any value — it always returns undefined

✅ return inside the callback only exits that iteration (like continue)

❌ You cannot break or return from the outer function using return inside forEach



❌ Does not return anything useful:

const result = arr.forEach(num => num * 2);

console.log(result); // ❌ undefined


✅ return inside callback skips iteration (like continue, but not real continue):

arr.forEach(num => {
  if (num === 2) return; // ✅ skips this one
  console.log(num); // prints 1 and 3
});


❌ You cannot break or exit early with break or return:

arr.forEach(num => {
  if (num === 2) break; // ❌ SyntaxError: Illegal break statement
});




| Loop Type    | Callback-Based? | Supports `return`?     | Can Break Early?     | Returns New Value? |
| ------------ | --------------- | ---------------------- | -------------------- | ------------------ |
| `for`        | ❌ No            | ✅ In function only     | ✅ Yes                | ❌ No               |
| `for...of`   | ❌ No            | ✅ In function only     | ✅ Yes                | ❌ No               |
| `for...in`   | ❌ No            | ✅ In function only     | ✅ Yes                | ❌ No               |
| `while`      | ❌ No            | ✅ In function only     | ✅ Yes                | ❌ No               |
| `do...while` | ❌ No            | ✅ In function only     | ✅ Yes                | ❌ No               |
| `forEach()`  | ✅ Yes           | ❌ Only inside callback | ❌ No (`break` fails) | ❌ No (`undefined`) |


| Loop Type  | Supports `break` | Supports `continue` | Can `return` from outer function |
| ---------- | ---------------- | ------------------- | -------------------------------- |
| `forEach`  | ❌                | ❌                   | ❌                                |
| `for...of` | ✅                | ✅                   | ✅                                |
| `for...in` | ✅                | ✅                   | ✅                                |
| `for`      | ✅                | ✅                   | ✅                                |
| `while`    | ✅                | ✅                   | ✅                                |
